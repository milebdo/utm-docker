filter {

# Suricata filter version 1.0.4
# Based on https://suricata.readthedocs.io/en/latest/output/eve/eve-json-format.html (latest 8.0.0) (august 2025)
# and real events log provided
# Support json format
    split {
     field => "message"
     terminator => "<utm-log-separator>"
    }

    #Looking for datasource generated by an agent and parse original message
    if [message]=~/\[utm_stack_agent_ds=(.+)\]-(.+)/ {
      grok {
        match => {
          "message" => [ "\[utm_stack_agent_ds=%{DATA:dataSource}\]-%{GREEDYDATA:original_log_message}" ]
        }
      }
    }
    if [original_log_message] {
      mutate {
        update => { "message" => "%{[original_log_message]}" }
      }
    }

    if ![dataType] {
      # Parse Suricata logs from syslog
      if [message] =~ /suricata\[\d+\]:.*event_type/ {
        grok {
          match => {
            "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{HOSTNAME:syslog_host} %{PROG:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:suricata_json}"
          }
          tag_on_failure => ["_grokparsefailure_suricata"]
        }
        
        if [suricata_json] {
          json { 
            source => "suricata_json"
          }
          mutate {
            remove_field => ["suricata_json", "syslog_pri", "syslog_timestamp", "syslog_program", "syslog_pid"]
          }
        }

      
      # Process all Suricata event types (from both syslog and file)
      if [event_type] and ([event_type] == "anomaly" or [event_type] == "tls" or [event_type] == "flow" 
          or [event_type] == "alert" or [event_type] == "dns" or [event_type] == "ssh" 
          or [event_type] == "http" or [event_type] == "ftp" or [event_type] == "ftp_data" 
          or [event_type] == "tftp" or [event_type] == "smb" or [event_type] == "initial_request" 
          or [event_type] == "initial_response" or [event_type] == "connect_request" or [event_type] == "connect_response" 
          or [event_type] == "tls_handshake" or [rdp] or [event_type] == "rfb" or [event_type] == "mqtt" 
          or [event_type] == "http2" or [event_type] == "pgsql" or [event_type] == "ike" 
          or [event_type] == "ikev1" or [event_type] == "ikev2" 
          or [event_type] == "modbus" or [event_type] == "quic" or [event_type] == "snmp" 
          or [event_type] == "fileinfo" or [event_type] == "sip" or [event_type] == "dhcp") {
              mutate {
                  rename => ["dest_ip", "[logx][suricata][dest_ip]"]
                  rename => ["dest_port", "[logx][suricata][dest_port]"]
                  rename => ["flow_id", "[logx][suricata][flow_id]"]
                  rename => ["host", "[logx][suricata][host]"]
                  rename => ["in_iface", "[logx][suricata][in_iface]"]
                  rename => ["proto", "[logx][suricata][proto]"]
                  rename => ["src_ip", "[logx][suricata][src_ip]"]
                  rename => ["src_port", "[logx][suricata][src_port]"]
                  rename => ["tx_id", "[logx][suricata][tx_id]"]
              }
      }
      
      # Set dataSource from syslog_host or host
      if (![dataSource]){
        if [syslog_host] {
          mutate {
            add_field => { "dataSource" => "%{syslog_host}" }
          }
        } else if [host] {
          mutate {
            add_field => { "dataSource" => "%{host}" }
          }
        }
      }
      
      # Clean up syslog_host field after using it
      if [syslog_host] {
        mutate {
          remove_field => ["syslog_host"]
        }
      }
      
      # Add dataType and clean up fields
      mutate {
          add_field => {
              "dataType" => "suricata"
          }
          remove_field => [ "timestamp", "type", "path"]
          rename => ["event_type", "[logx][suricata][event_type]"]
      }
          if [tls] {
              mutate {
                  rename => ["tls", "[logx][suricata][tls]"]
              }
          }
          if [ssh] {
              mutate {
                  rename => ["ssh", "[logx][suricata][ssh]"]
              }
          }
          if [stats] {
              mutate {
                  rename => ["stats", "[logx][suricata][stats]"]
              }
          }
          if [flow] {
              mutate {
                  rename => ["flow", "[logx][suricata][flow]"]
              }
          }
          if [tcp] {
              mutate {
                  rename => ["tcp", "[logx][suricata][tcp]"]
              }
          }
          if [dns] {
              mutate {
                  rename => ["dns", "[logx][suricata][dns]"]
              }
          }
          if [app_proto] {
              mutate {
                  rename => ["app_proto", "[logx][suricata][app_proto]"]
              }
          }
          if [anomaly] {
              mutate {
                  rename => ["anomaly", "[logx][suricata][anomaly]"]
              }
          }
          if [alert] {
              mutate {
                  rename => ["alert", "[logx][suricata][alert]"]
              }
            if [logx][suricata][alert][severity] {
              if [logx][suricata][alert][severity] >= 3 {
                  mutate {
                      add_field => {
                          "[logx][suricata][severity_label]" => "Low"
                          "[logx][suricata][severity]" => 1
                      }
                  }
              }
              if [logx][suricata][alert][severity] == 2 {
                  mutate {
                      add_field => {
                          "[logx][suricata][severity_label]" => "Medium"
                          "[logx][suricata][severity]" => 2
                      }
                  }
              }
              if [logx][suricata][alert][severity] == 1 {
                  mutate {
                      add_field => {
                          "[logx][suricata][severity_label]" => "High"
                          "[logx][suricata][severity]" => 3
                      }
                  }
              }
              mutate {
                  remove_field => [ "[logx][suricata][alert][severity]" ]
              }
            }
          }
  #.......................................................................
  # Add new event_types to logx structure, detected in real logs, present in suricata 7.0.0

              mutate {
                  rename => ["http", "[logx][suricata][http]"]
                  rename => ["ftp", "[logx][suricata][ftp]"]
                  rename => ["ftp_data", "[logx][suricata][ftp_data]"]
                  rename => ["tftp", "[logx][suricata][tftp]"]
                  rename => ["smb", "[logx][suricata][smb]"]

                  # RDP event_type
                  rename => ["rdp", "[logx][suricata][rdp]"]
                  # End RDP event_type

                  rename => ["rfb", "[logx][suricata][rfb]"]
                  rename => ["mqtt", "[logx][suricata][mqtt]"]
                  rename => ["http2", "[logx][suricata][http2]"]
                  rename => ["pgsql", "[logx][suricata][pgsql]"]
                  rename => ["ike", "[logx][suricata][ike]"]
                  rename => ["ikev1", "[logx][suricata][ike]"]
                  rename => ["ikev2", "[logx][suricata][ike]"]
                  rename => ["modbus", "[logx][suricata][modbus]"]
                  rename => ["quic", "[logx][suricata][quic]"]

                  # New fields from real logs, not present in suricata docs
                  rename => ["snmp", "[logx][suricata][snmp]"]
                  rename => ["fileinfo", "[logx][suricata][fileinfo]"]
                  rename => ["sip", "[logx][suricata][sip]"]
                  rename => ["dhcp", "[logx][suricata][dhcp]"]

                  # This field isnt an event_type but appear in alert real logs
                  rename => ["files", "[logx][suricata][alert][files]"]
              }

  #.......................................................................
  # Add fields to logx structure, detected outside th event_type, present in suricata 7.0.0
          if [logx][suricata][event_type] == "mqtt" {
              mutate {
                  rename => ["pcap_cnt", "[logx][suricata][mqtt][pcap_cnt]"]
              }
          } else if [logx][suricata][event_type] == "pgsql" {
              mutate {
                  rename => ["pcap_cnt", "[logx][suricata][pgsql][pcap_cnt]"]
              }
          } else if [logx][suricata][event_type] == "fileinfo" {
              if [logx][suricata][http] {
                mutate {
                    rename => ["fileinfo", "[logx][suricata][http][fileinfo]"]
                }
              } else if [logx][suricata][http2] {
                mutate {
                    rename => ["fileinfo", "[logx][suricata][http2][fileinfo]"]
                }
              } else {
                mutate {
                    rename => ["fileinfo", "[logx][suricata][fileinfo]"]
                }
              }
          } else if [logx][suricata][event_type] == "anomaly" {
              mutate {
                  rename => ["pcap_cnt", "[logx][suricata][anomaly][pcap_cnt]"]
                  rename => ["packet", "[logx][suricata][anomaly][packet]"]
                  rename => ["packet_info", "[logx][suricata][anomaly][packet_info]"]
              }
          } else if [logx][suricata][event_type] == "flow" {
              mutate {
                  rename => ["icmp_type", "[logx][suricata][flow][icmp_type]"]
                  rename => ["icmp_code", "[logx][suricata][flow][icmp_code]"]
                  rename => ["response_icmp_code", "[logx][suricata][flow][response_icmp_code]"]
                  rename => ["response_icmp_type", "[logx][suricata][flow][response_icmp_type]"]
              }
          }

  #.......................................................................
  # Implementing logx.utm.action field used for established connections
          if [logx][suricata][event_type] == "tls" {
            if ![logx][suricata][tls][session_resumed] {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "dns" {
            if [logx][suricata][dns][type] and [logx][suricata][dns][type] == "answer" {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "flow" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] and 
            ([logx][suricata][flow][bytes_toserver] and [logx][suricata][flow][bytes_toserver] > 0) and 
            ([logx][suricata][flow][bytes_toclient] and [logx][suricata][flow][bytes_toclient] > 0) {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "ssh" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] and 
            [logx][suricata][ssh][server] and [logx][suricata][ssh][client] {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "alert" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] and [logx][suricata][alert][action] == "allowed" and 
            ([logx][suricata][flow][bytes_toserver] and [logx][suricata][flow][bytes_toserver] > 0) and 
            ([logx][suricata][flow][bytes_toclient] and [logx][suricata][flow][bytes_toclient] > 0) {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "http" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] and [logx][suricata][http][status] {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "ftp" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] and [logx][suricata][ftp][completion_code] {
                ruby {
                  code => "
                      event.get('[logx][suricata][ftp][completion_code]').each_with_index do |value,key|
                          if value =~ /(2\d\d)|(125)/
                            event.set('[logx][utm][action]', 'Success')
                          end
                      end
                      "
                  }
            }
          } else if [logx][suricata][event_type] == "tftp" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] and 
            ([logx][suricata][tftp][packet] and [logx][suricata][tftp][packet] != "error") {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "smb" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] and 
            ( [logx][suricata][smb][command] and "NEGOTIATE" in [logx][suricata][smb][command] ) and 
            [logx][suricata][smb][status] and ( "SUCCESS" in [logx][suricata][smb][status] or 
            "GRANTED" in [logx][suricata][smb][status] or "CONNECTED" in [logx][suricata][smb][status]) {
                mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "rdp" 
          or ([logx][suricata][rdp][event_type] and ([logx][suricata][rdp][event_type] == "initial_response"  
          or [logx][suricata][rdp][event_type] == "initial_request" or [logx][suricata][rdp][event_type] == "connect_request" 
          or [logx][suricata][rdp][event_type] == "connect_response" or [logx][suricata][rdp][event_type] == "tls_handshake") ) {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] and 
            ([logx][suricata][rdp][event_type] == "connect_response" or [logx][suricata][rdp][event_type] == "tls_handshake") {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "rfb" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] and 
            ([logx][suricata][rfb][authentication][security-result] and [logx][suricata][rfb][authentication][security-result] == "OK") {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "mqtt" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] and 
            ([logx][suricata][mqtt][connack][return_code] and 
            ([logx][suricata][mqtt][connack][return_code] == 0 or [logx][suricata][mqtt][connack][return_code] == "0x00")) {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "http2" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] and 
            ([logx][suricata][http2][response][headers] ) {
              ruby {
                  code => "
                      event.get('[logx][suricata][http2][response][headers]').each_with_index do |value,key|
                          if (value['name'] == 'status' or value['name'] == ':status') 
                            event.set('[logx][utm][action]', 'Success')
                          end
                      end
                      "
              }
            }
          } else if [logx][suricata][event_type] == "pgsql" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] and 
            ([logx][suricata][pgsql][request][simple_query] or [logx][suricata][pgsql][response][command_completed] or 
            ([logx][suricata][pgsql][response][ssl_accepted] and [logx][suricata][pgsql][response][ssl_accepted] == "true") or 
            ([logx][suricata][pgsql][response][accepted] and [logx][suricata][pgsql][response][accepted] == "true") or 
            [logx][suricata][pgsql][response][authentication_md5_password] ) {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "ike" or [logx][suricata][event_type] == "ikev1" or [logx][suricata][event_type] == "ikev2" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "modbus" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "sip" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "quic" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "fileinfo" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "snmp" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          } else if [logx][suricata][event_type] == "dhcp" {
            if [logx][suricata][src_ip] and [logx][suricata][dest_ip] and 
            ([logx][suricata][dhcp][assigned_ip] and [logx][suricata][dhcp][assigned_ip] != "0") {
                  mutate {
                    add_field => { "[logx][utm][action]" => "Success" }
                  }
            }
          }
      }
      # Remove fields that are not needed
      mutate {
        remove_field => ["original_log_message", "suricata_json"]
      }
    }
}
